lim <- read.delim("~/Desktop/ST-Thesis/Datasets/HumanLymphNodeDocker/filtered_expression_matrix.txt", row.names=1)
View(lim)
l = lim[1:100,1:100]
ll = dist(l)
ll[1:3]
ll = as.matrix(ll)
ll
ll[1:4]
ll[1:4,]
ll[1:4,1:4]
View(l)
l = t(l)
ll = dist(l)
ll[1:4,1:4]
ll
ll[1:4,1:4]
ll = as.matrix(ll)
ll[1:4,1:4]
View(lim)
?ddist
?dist
x = rnorm(100)
y = rnorm(100,3)
hist(x)
hist(y)
ks.test(x,y,alternative = "less")
ks.test(x,y,alternative = "great")
ks.test(y,x,alternative = "less")
?ks.test
BiocManager::install(version='devel')
BiocManager::install("netDx")
library(netDx)
suppressWarnings(suppressMessages(require(netDx)))
suppressWarnings(suppressMessages(library(curatedTCGAData)))
BiocManager::install("curatedTCGAData")
suppressWarnings(suppressMessages(require(netDx)))
suppressWarnings(suppressMessages(library(curatedTCGAData)))
brca <- suppressMessages(curatedTCGAData("BRCA",c("mRNAArray"),FALSE))
View(brca)
staget <- sub("[abcd]","",sub("t","",colData(brca)$pathology_T_stage))
brca@colData@listData[["pathology_T_stage"]]
staget <- suppressWarnings(as.integer(staget))
colData(brca)$STAGE <- staget
staget
pam50 <- colData(brca)$PAM50.mRNA
pam50[which(!pam50 %in% "Luminal A")] <- "notLumA"
pam50[which(pam50 %in% "Luminal A")] <- "LumA"
colData(brca)$pam_mod <- pam50
union(c(TRUE,FALSE),c(FALSE,FALSE))
union(c(TRUE,FALSE),c(TRUE,FALSE))
union(c(TRUE,FALSE),c(TRUE,TRUE))
union(c(TRUE,TRUE),c(FALSE,FALSE))
?union
union(c(TRUE,TRUE),c(FALSE,FALSE,FALSE))
tmp <- colData(brca)$PAM50.mRNA
which(tmp %in% c("Normal-like","Luminal B","HER2-enriched"))
View(brca)
idx <- union(which(tmp %in% c("Normal-like","Luminal B","HER2-enriched")),
which(is.na(staget)))
pID <- colData(brca)$patientID
tokeep <- setdiff(pID, pID[idx])
brca <- brca[,tokeep,]
smp <- sampleMap(brca)
View(smp)
smp@listData[["assay"]]
which(smp$assay=="BRCA_mRNAArray-20160128")
smp <- sampleMap(brca)
samps <- smp[which(smp$assay=="BRCA_mRNAArray-20160128"),]
# remove duplicate assays mapped to the same sample
notdup <- samps[which(!duplicated(samps$primary)),"colname"]
brca[[1]] <- suppressMessages(brca[[1]][,notdup])
notdup
samps$primary
# colData must have ID and STATUS columns
pID <- colData(brca)$patientID
colData(brca)$ID <- pID
colData(brca)$STATUS <- colData(brca)$pam_mod
# create grouping rules
groupList <- list()
# genes in mRNA data are grouped by pathways
pathList <- readPathways(fetchPathwayDefinitions("January",2018))
View(pathList)
pathList[1:3]
groupList[["BRCA_mRNAArray-20160128"]] <- pathList[1:3]
# clinical data is not grouped; each variable is its own feature
groupList[["clinical"]] <- list(
age="patient.age_at_initial_pathologic_diagnosis",
stage="STAGE"
)
groupList
# create function to tell netDx how to build features (PSN) from your data
makeNets <- function(dataList, groupList, netDir,...) {
netList <- c() # initialize before is.null() check
# make RNA nets (NOTE: the check for is.null() is important!)
# (Pearson correlation)
if (!is.null(groupList[["BRCA_mRNAArray-20160128"]])) {
netList <- makePSN_NamedMatrix(dataList[["BRCA_mRNAArray-20160128"]],
rownames(dataList[["BRCA_mRNAArray-20160128"]]),
groupList[["BRCA_mRNAArray-20160128"]],
netDir,verbose=FALSE,
writeProfiles=TRUE,...)
}
# make clinical nets (normalized difference)
netList2 <- c()
if (!is.null(groupList[["clinical"]])) {
netList2 <- makePSN_NamedMatrix(dataList$clinical,
rownames(dataList$clinical),
groupList[["clinical"]],netDir,
simMetric="custom",customFunc=normDiff, # custom function
writeProfiles=FALSE,
sparsify=TRUE,verbose=TRUE,...)
}
netList <- c(unlist(netList),unlist(netList2))
return(netList)
}
paste(tempdir(),randAlphanumString(),
"pred_output",sep=getFileSep())
getFileSep()
randAlphanumString()
randAlphanumString()
randAlphanumString()
tempdir()
tempdir()
tempdir()
set.seed(42) # make results reproducible
outDir <- paste(tempdir(),randAlphanumString(),
"pred_output",sep=getFileSep())
outDir
out <- buildPredictor(
dataList=brca,groupList=groupList,
makeNetFunc=makeNets,
outDir=outDir, ## netDx requires absolute path
numSplits=2L,featScoreMax=2L, featSelCutoff=1L,
numCores=1L,logging="none",
keepAllData=FALSE,debugMode=TRUE
)
?buildPredictor
library(Seurat)
setwd("~/Desktop/Margarita/HumanBreastCancerBAS1")
spot_coordinates <- read.delim("~/Desktop/Margarita/HumanBreastCancerBAS1/spot_coordinates.txt", row.names=1)
View(spot_coordinates)
plot(spot_coordinates$imagerow,spot_coordinates$imagecol)
filtered_expression_matrix <- read.delim("~/Desktop/Margarita/HumanBreastCancerBAS1/filtered_expression_matrix.txt", row.names=1)
View(filtered_expression_matrix)
dim(filtered_expression_matrix)
sum(rowsum(filtered_expression_matrix) < 10)
sum(rowSums(filtered_expression_matrix) < 10)
sum(rowSums(filtered_expression_matrix) <= 10)
wilcox0 = ""
kolmogorov0 = ""
wilcox0.25 = ""
kolmogorov0.25 = ""
wilcox0.5 = ""
kolmogorov0.5 = ""
wilcox0.75 = ""
kolmogorov0.75 = ""
wilcox1 = ""
kolmogorov1 = ""
compare0 = read.delim("/Users/giovanni/Desktop/Margarita/HumanBreastCancerBAS1/0/Results/filtered_expression_matrix/14/filtered_expression_matrix_scoreSum.txt", header=FALSE, row.names=1)
compare0.25 = read.delim("/Users/giovanni/Desktop/Margarita/HumanBreastCancerBAS1/0.25/Results/filtered_expression_matrix/19/filtered_expression_matrix_scoreSum.txt", header=FALSE, row.names=1)
compare0.5 = read.delim("/Users/giovanni/Desktop/Margarita/HumanBreastCancerBAS1/0.5/Results/filtered_expression_matrix/17/filtered_expression_matrix_scoreSum.txt", header=FALSE, row.names=1)
compare0.75 = read.delim("/Users/giovanni/Desktop/Margarita/HumanBreastCancerBAS1/0.75/Results/filtered_expression_matrix/18/filtered_expression_matrix_scoreSum.txt", header=FALSE, row.names=1)
compare1 = read.delim("/Users/giovanni/Desktop/Margarita/HumanBreastCancerBAS1/1/Results/filtered_expression_matrix/18/filtered_expression_matrix_scoreSum.txt", header=FALSE, row.names=1)
for(j in c(0,0.25,0.5,0.75,1)){
w_temp = 1:100
k_temp = 1:100
compare = get(paste("compare",j,sep=""))
for(i in 101:200){
path = paste("~/Desktop/Margarita/HumanBreastCancerBAS1/",j,"null/",i,"/Results/filtered_expression_matrix/",sep="")
setwd(path)
clusters = strsplit(list.dirs(".",recursive = FALSE)[1],"/")[[1]][2]
path = paste(path,"/",clusters,"/filtered_expression_matrix_scoreSum.txt",sep="")
a <- read.delim(path, header=FALSE, row.names=1)
k = wilcox.test(compare$V2, y = a$V2 ,alternative = "greater")
w_temp[i-100] = k$p.value
kk = ks.test(compare$V2, y = a$V2,alternative = "less")
k_temp[i-100] = kk$p.value
}
assign(paste("wilcox",j,sep=""), w_temp)
assign(paste("kolmogorov",j,sep=""), k_temp)
}
frame = data.frame(configuration=factor(c(rep("0:1",200),rep("1:4",200),rep("1:2",200),rep("3:4",200),rep("1:1",200)),levels=c("0:1","1:4","1:2","3:4","1:1")))
frame$test = rep(c(rep("wilcoxon",100),rep("kolmogorov",100)),5)
pvalue_correction = 100
frame$significant = c(wilcox0 < (0.05/pvalue_correction),kolmogorov0 < (0.05/pvalue_correction),wilcox0.25 < (0.05/pvalue_correction),kolmogorov0.25 < (0.05/pvalue_correction),wilcox0.5 < (0.05/pvalue_correction),kolmogorov0.5 < (0.05/pvalue_correction),wilcox0.75 < (0.05/pvalue_correction),kolmogorov0.75 < (0.05/pvalue_correction),wilcox1 < (0.05/pvalue_correction),kolmogorov1 < (0.05/pvalue_correction))
count = table(frame)
count = t(count[,,2])
rownames(count) = c("Kolmogorovâ€“Smirnov","Wilcoxon")
barplot(count, main="Number of significant tests over 100 per configuration",
xlab="Stardust configuration - space:transcripts", col=c("#2fbfc4","#f8766d"), ylim=c(0,100),
legend = rownames(count), beside=TRUE,args.legend = list( x = "top",bty = "n", ncol = 2,inset = -0.1))
