wilcox0 = ""
wilcox0.25 = ""
wilcox0.5 = ""
wilcox0.75 = ""
wilcox1 = ""
compare0 <- read.delim("~/Desktop/Margarita/HumanHeart/0/Results/filtered_expression_matrix/13/filtered_expression_matrix_scoreSum.txt", header=FALSE, row.names=1)
compare0.25 <- read.delim("~/Desktop/Margarita/HumanHeart/0.25/Results/filtered_expression_matrix/15/filtered_expression_matrix_scoreSum.txt", header=FALSE, row.names=1)
compare0.5 <- read.delim("~/Desktop/Margarita/HumanHeart/0.5/Results/filtered_expression_matrix/14/filtered_expression_matrix_scoreSum.txt", header=FALSE, row.names=1)
compare0.75 <- read.delim("~/Desktop/Margarita/HumanHeart/0.75/Results/filtered_expression_matrix/14/filtered_expression_matrix_scoreSum.txt", header=FALSE, row.names=1)
compare1 <- read.delim("~/Desktop/Margarita/HumanHeart/1/Results/filtered_expression_matrix/15/filtered_expression_matrix_scoreSum.txt", header=FALSE, row.names=1)
for(j in c(0,0.25,0.5,0.75,1)){
w_temp = 1:100
compare = get(paste("compare",j,sep=""))
for(i in 101:200){
path = paste("~/Desktop/Margarita/HumanHeart/",j,"null/",i,"/Results/filtered_expression_matrix/",sep="")
setwd(path)
clusters = strsplit(list.dirs(".",recursive = FALSE)[1],"/")[[1]][2]
path = paste(path,"/",clusters,"/filtered_expression_matrix_scoreSum.txt",sep="")
a <- read.delim(path, header=FALSE, row.names=1)
k = wilcox.test(compare$V2, y = a$V2 ,alternative = "greater")
w_temp[i-100] = k$p.value
}
assign(paste("wilcox",j,sep=""), w_temp)
}
frame = data.frame(configuration=factor(c(rep("0:1",100),rep("1:4",100),rep("1:2",100),rep("3:4",100),rep("1:1",100)),levels=c("0:1","1:4","1:2","3:4","1:1")))
frame$test = rep(c(rep("wilcoxon",100)),5)
pvalue_correction = 100
frame$significant = c(wilcox0 < (0.05/pvalue_correction),wilcox0.25 < (0.05/pvalue_correction),wilcox0.5 < (0.05/pvalue_correction),wilcox0.75 < (0.05/pvalue_correction),wilcox1 < (0.05/pvalue_correction))
count = table(frame)
count = t(count[,,2])
rownames(count) = c("Wilcoxon")
barplot(count, main="Number of significant tests over 100 per configuration",
xlab="Stardust configuration - space:transcripts", col=c("#2fbfc4"), ylim=c(0,100),
legend = rownames(count), beside=TRUE,args.legend = list( x = "top",bty = "n", ncol = 1,inset = -0.1))
